Grammar

    0 $accept: program $end

    1 program: %empty
    2        | program var_decl
    3        | program func_def

    4 var_decl: T_VAR T_NAME type

    5 func_def: T_FUNC T_NAME '(' opt_param_list ')' opt_type block

    6 opt_param_list: %empty
    7               | param_list

    8 param_list: param
    9           | param_list ',' param

   10 param: T_NAME ptype

   11 opt_type: %empty
   12         | type

   13 block: '{' stmts_or_vars '}'

   14 stmts_or_vars: %empty
   15              | stmts_or_vars stmt
   16              | stmts_or_vars local_var_decl

   17 local_var_decl: T_VAR T_NAME type

   18 stmt: T_IF expr block
   19     | T_IF expr block T_ELSE block
   20     | T_WHILE expr block
   21     | lvalue '=' expr
   22     | call

   23 type: T_INT
   24     | T_DOUBLE
   25     | T_STRING
   26     | '[' T_INT_LITERAL ']' type

   27 ptype: type
   28      | '*' '[' ']' type

   29 expr: or_expr

   30 or_expr: and_expr
   31        | or_expr T_OR and_expr

   32 and_expr: cmp_expr
   33         | and_expr T_AND cmp_expr

   34 cmp_expr: add_expr
   35         | add_expr '<' add_expr
   36         | add_expr '>' add_expr
   37         | add_expr T_LE add_expr
   38         | add_expr T_GE add_expr
   39         | add_expr T_EQ add_expr
   40         | add_expr T_NE add_expr
   41         | add_expr T_CMP add_expr

   42 add_expr: mult_expr
   43         | add_expr '+' mult_expr
   44         | add_expr '-' mult_expr

   45 mult_expr: unary_expr
   46          | mult_expr '*' unary_expr
   47          | mult_expr '/' unary_expr

   48 unary_expr: value_expr
   49           | '-' unary_expr
   50           | '!' unary_expr
   51           | '(' T_INT ')' unary_expr
   52           | '(' T_DOUBLE ')' unary_expr

   53 value_expr: T_INT_LITERAL
   54           | T_DOUBLE_LITERAL
   55           | T_STRING_LITERAL
   56           | call
   57           | lvalue
   58           | '(' expr ')'

   59 lvalue: T_NAME
   60       | lvalue '[' expr ']'

   61 call: T_NAME '(' opt_expr_list ')'

   62 opt_expr_list: %empty
   63              | expr_list

   64 expr_list: expr
   65          | expr_list ',' expr


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 50
    '(' (40) 5 51 52 58 61
    ')' (41) 5 51 52 58 61
    '*' (42) 28 46
    '+' (43) 43
    ',' (44) 9 65
    '-' (45) 44 49
    '/' (47) 47
    '<' (60) 35
    '=' (61) 21
    '>' (62) 36
    '[' (91) 26 28 60
    ']' (93) 26 28 60
    '{' (123) 13
    '}' (125) 13
    error (256)
    T_FUNC (258) 5
    T_VAR (259) 4 17
    T_IF (260) 18 19
    T_ELSE (261) 19
    T_WHILE (262) 20
    T_INT (263) 23 51
    T_DOUBLE (264) 24 52
    T_STRING (265) 25
    T_LE (266) 37
    T_GE (267) 38
    T_EQ (268) 39
    T_NE (269) 40
    T_CMP (270) 41
    T_AND (271) 33
    T_OR (272) 31
    T_NAME (273) 4 5 10 17 59 61
    T_INT_LITERAL (274) 26 53
    T_DOUBLE_LITERAL (275) 54
    T_STRING_LITERAL (276) 55


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1 2 3
        on right: 0 2 3
    var_decl (39)
        on left: 4
        on right: 2
    func_def (40)
        on left: 5
        on right: 3
    opt_param_list (41)
        on left: 6 7
        on right: 5
    param_list (42)
        on left: 8 9
        on right: 7 9
    param (43)
        on left: 10
        on right: 8 9
    opt_type (44)
        on left: 11 12
        on right: 5
    block (45)
        on left: 13
        on right: 5 18 19 20
    stmts_or_vars (46)
        on left: 14 15 16
        on right: 13 15 16
    local_var_decl (47)
        on left: 17
        on right: 16
    stmt (48)
        on left: 18 19 20 21 22
        on right: 15
    type (49)
        on left: 23 24 25 26
        on right: 4 12 17 26 27 28
    ptype (50)
        on left: 27 28
        on right: 10
    expr (51)
        on left: 29
        on right: 18 19 20 21 58 60 64 65
    or_expr (52)
        on left: 30 31
        on right: 29 31
    and_expr (53)
        on left: 32 33
        on right: 30 31 33
    cmp_expr (54)
        on left: 34 35 36 37 38 39 40 41
        on right: 32 33
    add_expr (55)
        on left: 42 43 44
        on right: 34 35 36 37 38 39 40 41 43 44
    mult_expr (56)
        on left: 45 46 47
        on right: 42 43 44 46 47
    unary_expr (57)
        on left: 48 49 50 51 52
        on right: 45 46 47 49 50 51 52
    value_expr (58)
        on left: 53 54 55 56 57 58
        on right: 48
    lvalue (59)
        on left: 59 60
        on right: 21 57 60
    call (60)
        on left: 61
        on right: 22 56
    opt_expr_list (61)
        on left: 62 63
        on right: 61
    expr_list (62)
        on left: 64 65
        on right: 63 65


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    2 program: program • var_decl
    3        | program • func_def

    $end    shift, and go to state 2
    T_FUNC  shift, and go to state 3
    T_VAR   shift, and go to state 4

    var_decl  go to state 5
    func_def  go to state 6


State 2

    0 $accept: program $end •

    $default  accept


State 3

    5 func_def: T_FUNC • T_NAME '(' opt_param_list ')' opt_type block

    T_NAME  shift, and go to state 7


State 4

    4 var_decl: T_VAR • T_NAME type

    T_NAME  shift, and go to state 8


State 5

    2 program: program var_decl •

    $default  reduce using rule 2 (program)


State 6

    3 program: program func_def •

    $default  reduce using rule 3 (program)


State 7

    5 func_def: T_FUNC T_NAME • '(' opt_param_list ')' opt_type block

    '('  shift, and go to state 9


State 8

    4 var_decl: T_VAR T_NAME • type

    T_INT     shift, and go to state 10
    T_DOUBLE  shift, and go to state 11
    T_STRING  shift, and go to state 12
    '['       shift, and go to state 13

    type  go to state 14


State 9

    5 func_def: T_FUNC T_NAME '(' • opt_param_list ')' opt_type block

    T_NAME  shift, and go to state 15

    $default  reduce using rule 6 (opt_param_list)

    opt_param_list  go to state 16
    param_list      go to state 17
    param           go to state 18


State 10

   23 type: T_INT •

    $default  reduce using rule 23 (type)


State 11

   24 type: T_DOUBLE •

    $default  reduce using rule 24 (type)


State 12

   25 type: T_STRING •

    $default  reduce using rule 25 (type)


State 13

   26 type: '[' • T_INT_LITERAL ']' type

    T_INT_LITERAL  shift, and go to state 19


State 14

    4 var_decl: T_VAR T_NAME type •

    $default  reduce using rule 4 (var_decl)


State 15

   10 param: T_NAME • ptype

    T_INT     shift, and go to state 10
    T_DOUBLE  shift, and go to state 11
    T_STRING  shift, and go to state 12
    '['       shift, and go to state 13
    '*'       shift, and go to state 20

    type   go to state 21
    ptype  go to state 22


State 16

    5 func_def: T_FUNC T_NAME '(' opt_param_list • ')' opt_type block

    ')'  shift, and go to state 23


State 17

    7 opt_param_list: param_list •
    9 param_list: param_list • ',' param

    ','  shift, and go to state 24

    $default  reduce using rule 7 (opt_param_list)


State 18

    8 param_list: param •

    $default  reduce using rule 8 (param_list)


State 19

   26 type: '[' T_INT_LITERAL • ']' type

    ']'  shift, and go to state 25


State 20

   28 ptype: '*' • '[' ']' type

    '['  shift, and go to state 26


State 21

   27 ptype: type •

    $default  reduce using rule 27 (ptype)


State 22

   10 param: T_NAME ptype •

    $default  reduce using rule 10 (param)


State 23

    5 func_def: T_FUNC T_NAME '(' opt_param_list ')' • opt_type block

    T_INT     shift, and go to state 10
    T_DOUBLE  shift, and go to state 11
    T_STRING  shift, and go to state 12
    '['       shift, and go to state 13

    $default  reduce using rule 11 (opt_type)

    opt_type  go to state 27
    type      go to state 28


State 24

    9 param_list: param_list ',' • param

    T_NAME  shift, and go to state 15

    param  go to state 29


State 25

   26 type: '[' T_INT_LITERAL ']' • type

    T_INT     shift, and go to state 10
    T_DOUBLE  shift, and go to state 11
    T_STRING  shift, and go to state 12
    '['       shift, and go to state 13

    type  go to state 30


State 26

   28 ptype: '*' '[' • ']' type

    ']'  shift, and go to state 31


State 27

    5 func_def: T_FUNC T_NAME '(' opt_param_list ')' opt_type • block

    '{'  shift, and go to state 32

    block  go to state 33


State 28

   12 opt_type: type •

    $default  reduce using rule 12 (opt_type)


State 29

    9 param_list: param_list ',' param •

    $default  reduce using rule 9 (param_list)


State 30

   26 type: '[' T_INT_LITERAL ']' type •

    $default  reduce using rule 26 (type)


State 31

   28 ptype: '*' '[' ']' • type

    T_INT     shift, and go to state 10
    T_DOUBLE  shift, and go to state 11
    T_STRING  shift, and go to state 12
    '['       shift, and go to state 13

    type  go to state 34


State 32

   13 block: '{' • stmts_or_vars '}'

    $default  reduce using rule 14 (stmts_or_vars)

    stmts_or_vars  go to state 35


State 33

    5 func_def: T_FUNC T_NAME '(' opt_param_list ')' opt_type block •

    $default  reduce using rule 5 (func_def)


State 34

   28 ptype: '*' '[' ']' type •

    $default  reduce using rule 28 (ptype)


State 35

   13 block: '{' stmts_or_vars • '}'
   15 stmts_or_vars: stmts_or_vars • stmt
   16              | stmts_or_vars • local_var_decl

    T_VAR    shift, and go to state 36
    T_IF     shift, and go to state 37
    T_WHILE  shift, and go to state 38
    T_NAME   shift, and go to state 39
    '}'      shift, and go to state 40

    local_var_decl  go to state 41
    stmt            go to state 42
    lvalue          go to state 43
    call            go to state 44


State 36

   17 local_var_decl: T_VAR • T_NAME type

    T_NAME  shift, and go to state 45


State 37

   18 stmt: T_IF • expr block
   19     | T_IF • expr block T_ELSE block

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    expr        go to state 52
    or_expr     go to state 53
    and_expr    go to state 54
    cmp_expr    go to state 55
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 38

   20 stmt: T_WHILE • expr block

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    expr        go to state 62
    or_expr     go to state 53
    and_expr    go to state 54
    cmp_expr    go to state 55
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 39

   59 lvalue: T_NAME •
   61 call: T_NAME • '(' opt_expr_list ')'

    '('  shift, and go to state 63

    $default  reduce using rule 59 (lvalue)


State 40

   13 block: '{' stmts_or_vars '}' •

    $default  reduce using rule 13 (block)


State 41

   16 stmts_or_vars: stmts_or_vars local_var_decl •

    $default  reduce using rule 16 (stmts_or_vars)


State 42

   15 stmts_or_vars: stmts_or_vars stmt •

    $default  reduce using rule 15 (stmts_or_vars)


State 43

   21 stmt: lvalue • '=' expr
   60 lvalue: lvalue • '[' expr ']'

    '='  shift, and go to state 64
    '['  shift, and go to state 65


State 44

   22 stmt: call •

    $default  reduce using rule 22 (stmt)


State 45

   17 local_var_decl: T_VAR T_NAME • type

    T_INT     shift, and go to state 10
    T_DOUBLE  shift, and go to state 11
    T_STRING  shift, and go to state 12
    '['       shift, and go to state 13

    type  go to state 66


State 46

   53 value_expr: T_INT_LITERAL •

    $default  reduce using rule 53 (value_expr)


State 47

   54 value_expr: T_DOUBLE_LITERAL •

    $default  reduce using rule 54 (value_expr)


State 48

   55 value_expr: T_STRING_LITERAL •

    $default  reduce using rule 55 (value_expr)


State 49

   51 unary_expr: '(' • T_INT ')' unary_expr
   52           | '(' • T_DOUBLE ')' unary_expr
   58 value_expr: '(' • expr ')'

    T_INT             shift, and go to state 67
    T_DOUBLE          shift, and go to state 68
    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    expr        go to state 69
    or_expr     go to state 53
    and_expr    go to state 54
    cmp_expr    go to state 55
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 50

   49 unary_expr: '-' • unary_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    unary_expr  go to state 70
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 51

   50 unary_expr: '!' • unary_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    unary_expr  go to state 71
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 52

   18 stmt: T_IF expr • block
   19     | T_IF expr • block T_ELSE block

    '{'  shift, and go to state 32

    block  go to state 72


State 53

   29 expr: or_expr •
   31 or_expr: or_expr • T_OR and_expr

    T_OR  shift, and go to state 73

    $default  reduce using rule 29 (expr)


State 54

   30 or_expr: and_expr •
   33 and_expr: and_expr • T_AND cmp_expr

    T_AND  shift, and go to state 74

    $default  reduce using rule 30 (or_expr)


State 55

   32 and_expr: cmp_expr •

    $default  reduce using rule 32 (and_expr)


State 56

   34 cmp_expr: add_expr •
   35         | add_expr • '<' add_expr
   36         | add_expr • '>' add_expr
   37         | add_expr • T_LE add_expr
   38         | add_expr • T_GE add_expr
   39         | add_expr • T_EQ add_expr
   40         | add_expr • T_NE add_expr
   41         | add_expr • T_CMP add_expr
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    T_LE   shift, and go to state 75
    T_GE   shift, and go to state 76
    T_EQ   shift, and go to state 77
    T_NE   shift, and go to state 78
    T_CMP  shift, and go to state 79
    '<'    shift, and go to state 80
    '>'    shift, and go to state 81
    '+'    shift, and go to state 82
    '-'    shift, and go to state 83

    $default  reduce using rule 34 (cmp_expr)


State 57

   42 add_expr: mult_expr •
   46 mult_expr: mult_expr • '*' unary_expr
   47          | mult_expr • '/' unary_expr

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85

    $default  reduce using rule 42 (add_expr)


State 58

   45 mult_expr: unary_expr •

    $default  reduce using rule 45 (mult_expr)


State 59

   48 unary_expr: value_expr •

    $default  reduce using rule 48 (unary_expr)


State 60

   57 value_expr: lvalue •
   60 lvalue: lvalue • '[' expr ']'

    '['  shift, and go to state 65

    $default  reduce using rule 57 (value_expr)


State 61

   56 value_expr: call •

    $default  reduce using rule 56 (value_expr)


State 62

   20 stmt: T_WHILE expr • block

    '{'  shift, and go to state 32

    block  go to state 86


State 63

   61 call: T_NAME '(' • opt_expr_list ')'

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    $default  reduce using rule 62 (opt_expr_list)

    expr           go to state 87
    or_expr        go to state 53
    and_expr       go to state 54
    cmp_expr       go to state 55
    add_expr       go to state 56
    mult_expr      go to state 57
    unary_expr     go to state 58
    value_expr     go to state 59
    lvalue         go to state 60
    call           go to state 61
    opt_expr_list  go to state 88
    expr_list      go to state 89


State 64

   21 stmt: lvalue '=' • expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    expr        go to state 90
    or_expr     go to state 53
    and_expr    go to state 54
    cmp_expr    go to state 55
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 65

   60 lvalue: lvalue '[' • expr ']'

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    expr        go to state 91
    or_expr     go to state 53
    and_expr    go to state 54
    cmp_expr    go to state 55
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 66

   17 local_var_decl: T_VAR T_NAME type •

    $default  reduce using rule 17 (local_var_decl)


State 67

   51 unary_expr: '(' T_INT • ')' unary_expr

    ')'  shift, and go to state 92


State 68

   52 unary_expr: '(' T_DOUBLE • ')' unary_expr

    ')'  shift, and go to state 93


State 69

   58 value_expr: '(' expr • ')'

    ')'  shift, and go to state 94


State 70

   49 unary_expr: '-' unary_expr •

    $default  reduce using rule 49 (unary_expr)


State 71

   50 unary_expr: '!' unary_expr •

    $default  reduce using rule 50 (unary_expr)


State 72

   18 stmt: T_IF expr block •
   19     | T_IF expr block • T_ELSE block

    T_ELSE  shift, and go to state 95

    $default  reduce using rule 18 (stmt)


State 73

   31 or_expr: or_expr T_OR • and_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    and_expr    go to state 96
    cmp_expr    go to state 55
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 74

   33 and_expr: and_expr T_AND • cmp_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    cmp_expr    go to state 97
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 75

   37 cmp_expr: add_expr T_LE • add_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    add_expr    go to state 98
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 76

   38 cmp_expr: add_expr T_GE • add_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    add_expr    go to state 99
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 77

   39 cmp_expr: add_expr T_EQ • add_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    add_expr    go to state 100
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 78

   40 cmp_expr: add_expr T_NE • add_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    add_expr    go to state 101
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 79

   41 cmp_expr: add_expr T_CMP • add_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    add_expr    go to state 102
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 80

   35 cmp_expr: add_expr '<' • add_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    add_expr    go to state 103
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 81

   36 cmp_expr: add_expr '>' • add_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    add_expr    go to state 104
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 82

   43 add_expr: add_expr '+' • mult_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    mult_expr   go to state 105
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 83

   44 add_expr: add_expr '-' • mult_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    mult_expr   go to state 106
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 84

   46 mult_expr: mult_expr '*' • unary_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    unary_expr  go to state 107
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 85

   47 mult_expr: mult_expr '/' • unary_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    unary_expr  go to state 108
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 86

   20 stmt: T_WHILE expr block •

    $default  reduce using rule 20 (stmt)


State 87

   64 expr_list: expr •

    $default  reduce using rule 64 (expr_list)


State 88

   61 call: T_NAME '(' opt_expr_list • ')'

    ')'  shift, and go to state 109


State 89

   63 opt_expr_list: expr_list •
   65 expr_list: expr_list • ',' expr

    ','  shift, and go to state 110

    $default  reduce using rule 63 (opt_expr_list)


State 90

   21 stmt: lvalue '=' expr •

    $default  reduce using rule 21 (stmt)


State 91

   60 lvalue: lvalue '[' expr • ']'

    ']'  shift, and go to state 111


State 92

   51 unary_expr: '(' T_INT ')' • unary_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    unary_expr  go to state 112
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 93

   52 unary_expr: '(' T_DOUBLE ')' • unary_expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    unary_expr  go to state 113
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 94

   58 value_expr: '(' expr ')' •

    $default  reduce using rule 58 (value_expr)


State 95

   19 stmt: T_IF expr block T_ELSE • block

    '{'  shift, and go to state 32

    block  go to state 114


State 96

   31 or_expr: or_expr T_OR and_expr •
   33 and_expr: and_expr • T_AND cmp_expr

    T_AND  shift, and go to state 74

    $default  reduce using rule 31 (or_expr)


State 97

   33 and_expr: and_expr T_AND cmp_expr •

    $default  reduce using rule 33 (and_expr)


State 98

   37 cmp_expr: add_expr T_LE add_expr •
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 37 (cmp_expr)


State 99

   38 cmp_expr: add_expr T_GE add_expr •
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 38 (cmp_expr)


State 100

   39 cmp_expr: add_expr T_EQ add_expr •
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 39 (cmp_expr)


State 101

   40 cmp_expr: add_expr T_NE add_expr •
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 40 (cmp_expr)


State 102

   41 cmp_expr: add_expr T_CMP add_expr •
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 41 (cmp_expr)


State 103

   35 cmp_expr: add_expr '<' add_expr •
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 35 (cmp_expr)


State 104

   36 cmp_expr: add_expr '>' add_expr •
   43 add_expr: add_expr • '+' mult_expr
   44         | add_expr • '-' mult_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83

    $default  reduce using rule 36 (cmp_expr)


State 105

   43 add_expr: add_expr '+' mult_expr •
   46 mult_expr: mult_expr • '*' unary_expr
   47          | mult_expr • '/' unary_expr

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85

    $default  reduce using rule 43 (add_expr)


State 106

   44 add_expr: add_expr '-' mult_expr •
   46 mult_expr: mult_expr • '*' unary_expr
   47          | mult_expr • '/' unary_expr

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85

    $default  reduce using rule 44 (add_expr)


State 107

   46 mult_expr: mult_expr '*' unary_expr •

    $default  reduce using rule 46 (mult_expr)


State 108

   47 mult_expr: mult_expr '/' unary_expr •

    $default  reduce using rule 47 (mult_expr)


State 109

   61 call: T_NAME '(' opt_expr_list ')' •

    $default  reduce using rule 61 (call)


State 110

   65 expr_list: expr_list ',' • expr

    T_NAME            shift, and go to state 39
    T_INT_LITERAL     shift, and go to state 46
    T_DOUBLE_LITERAL  shift, and go to state 47
    T_STRING_LITERAL  shift, and go to state 48
    '('               shift, and go to state 49
    '-'               shift, and go to state 50
    '!'               shift, and go to state 51

    expr        go to state 115
    or_expr     go to state 53
    and_expr    go to state 54
    cmp_expr    go to state 55
    add_expr    go to state 56
    mult_expr   go to state 57
    unary_expr  go to state 58
    value_expr  go to state 59
    lvalue      go to state 60
    call        go to state 61


State 111

   60 lvalue: lvalue '[' expr ']' •

    $default  reduce using rule 60 (lvalue)


State 112

   51 unary_expr: '(' T_INT ')' unary_expr •

    $default  reduce using rule 51 (unary_expr)


State 113

   52 unary_expr: '(' T_DOUBLE ')' unary_expr •

    $default  reduce using rule 52 (unary_expr)


State 114

   19 stmt: T_IF expr block T_ELSE block •

    $default  reduce using rule 19 (stmt)


State 115

   65 expr_list: expr_list ',' expr •

    $default  reduce using rule 65 (expr_list)
